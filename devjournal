---------------------------------
2024/03/31 takeshi:

For websocket bindings check:
https://github.com/Exegetech/chat-rescript/blob/65c1fbf6f88ccd71e97433d0aff2ffff337029a9/frontend/src/bindings/WebSocket.res

---------------------------------
2024/04/06 takeshi:

Pending implementation:

src/Synther.res:
  - creates and recreates ss_stream
  - starts timer to periodically read data from ss_stream and write to websocket
  - subscribe to ss_stream('end-of-file') and writes 'end-of-file' to websocket
src/Recoger.res:
  - creates and recreates sr_stream
  - subscribe to wc.on('data') and writes to sr_stream
  - subscribe to sr_stream('data') and writes 'transcript' to websocket

---------------------------------
2024/04/14 takeshi:

To permit to support different speech synth/recog engines the config file of the app will be like this:
```
{
  "listen": "IP:PORT",

  "ss_engines": {
    "dtmf-gen": {
      "module": "dtmf-generation-stream",
      "config": {...config params...}
    },
    "gss": {
      "module": "google-speech-synth-stream",
      "config": {...config params...}
    },
    "azure-tts": {
      "module": "azure-speech-recog-stream",
      "config": {...config params...}
    },
  },

  "sr_engines": {
    "dtmf-det": {
      "module": "dtmf-detection-stream",
      "config": {...config params...}
    },
    "gsr": {
      "module": "google-speech-recog-stream",
      "config": {...config params...}
    },
    "azure-stt": {
      "module": "azure-speech-recog-stream",
      "config": {...config params...}
    },
    "whisper": {
      "module": "whisper-speech-recog-stream",
      "config": {...config params...}
    }
  }
}

And we will have code like this to load the modules:

```
const module_name = 'dtmf-generation-stream'
const mod = await import(name)
```

However, the rescript app itself will not have to deal with this.

Instead, we will write a javascript module that will provide a promise that will load the engines and provide a stream_factory function like this:
  get_stream_factory(config)
  ->Js.Promise.then_(stream_factory => {
    // then stream_factory will be passed to SpeechService instance that in turn will pass it to Synther or Recoger instance
  })

The stream_factory will be called like this:
```
  stream = stream_factory(format, engine, type, vendor_params})
```
where:
  - format is {sampleRate, bitDepth, channels}
  - engine is the engine name as registered in the config file ('dtmf-det', dtmf-gen' etc)
  - type: 'synth' | 'recog'
  - vendor_params: any extra_parameters that the stream implementation might allow

This will be later reused by mrcp_server.

